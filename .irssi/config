servers = (
  {
    address = "irc.freenode.net";
    chatnet = "Freenode";
    nick = "sulami";
    port = "7000";
    use_ssl = "yes";
    ssl_verify = "yes";
    autosendcmd = "/^exec -send nickserv gpg --use-agent -q -d ~/.irssi/ghost.gpg; exec -send nickserv gpg --use-agent -q -d ~/.irssi/id.gpg; wait 2000";
  },
  {
    address = "irc.nixers.net";
    chatnet = "Nixers";
    nick = "sulami";
    port = "6667";
    use_ssl = "no";
    ssl_verify = "no";
    autoconnect = "no";
  }
);

chatnets = {
  freenode = { type = "IRC"; nick = "sulami"; username = "sulami"; };
  Nixers = { type = "IRC"; nick = "sulami"; username = "sulami"; };
  Twitch = {
    type = "IRC";
    nick = "sulamiification";
    username = "sulamiification";
  };
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    topic = " $topic";
    topic_empty = "> No Topic <";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "yes";

      # window, root
      type = "window";
      # top, bottom
      placement = "top";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    empty_bar = {
      type = "root";
      placement = "bottom";
      position = "8";
      visible = "always";
    };
    empty_bar2 = {
      type = "root";
      placement = "bottom";
      position = "12";
      visible = "always";
    };
    # empty_bar3 = {
    #   type = "root";
    #   placement = "top";
    #   position = "10";
    #   visible = "always";
    # };
    empty_bar4 = {
      type = "window";
      placement = "top";
      position = "90";
      visible = "always";
    };
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "10";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };
    topic = { disabled = "true"; };
  };
};
settings = {
  core = {
    real_name = "Robin Schroer";
    user_name = "sulami";
    nick = "sulami";
  };
  "fe-text" = { actlist_sort = "refnum"; indent = "17"; };
  "fe-common/core" = {
    theme = "zebrah";
    use_status_window = "yes";
    use_msgs_window = "no";
    autocreate_query_level = "MSGS DCCMSGS";
    autocreate_windows = "yes";
    reuse_unused_windows = "yes";
    completion_auto = "yes";
    timestamps = "yes";
    autolog = "no";
    hilight_nick_matches = "no";
    hilight_color = "%r";
    timestamp_level = "MSGS";
    beep_msg_level = "MSGS NOTICES DCC DCCMSGS HILIGHT";
    autocreate_own_query = "no";
  };
  "perl/core/scripts" = {
    awl_placement = "top";
    awl_position = "10";
    awl_display_key = "$H$C$S";
    awl_display_key_active = "%g$C%n";
    awl_display_key_message = "%y$C%n";
    trackbar_string = "-";
    trackbar_style = "%K";
    anotherway_reason = "autoaway";
    awl_hide_data = "0";
    awl_display_header = "";
  };
};

logs = { };
hilights = (
  { text = "sulami"; nick = "no"; word = "no"; },
  { text = "robin"; nick = "no"; word = "no"; },
  { text = "schroer"; nick = "no"; word = "no"; },
  { text = "sulamiification"; nick = "no"; word = "no"; },
  { text = "peerwire"; nick = "no"; word = "no"; },
  { text = "frankenwm"; nick = "no"; word = "no"; }
);

ignores = (
  { level = "JOINS PARTS QUITS NICKS"; servertag = "Freenode"; }
);
aliases = { do = "say `$*`; exec -o - $*"; wcl = "window close"; };
channels = ( 
  { name = "#nixers"; chatnet = "Nixers"; autojoin = "yes"; }
);

